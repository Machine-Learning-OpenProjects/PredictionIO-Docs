===================================
How to Integrate a Custom Algorithm
===================================

In this tutorial, we will walk through the steps to build and integrate a
custom algorithm for use with PredictionIO. To run this tutorial, we recommend
installing the following:

- Java SE Development Kit 7
- `Gradle <http://www.gradle.org/>`_ 1.11

Older versions may work, but that is not guaranteed.


Create, Build, and Package a Custom Algorithm
---------------------------------------------

For simplicity, we have implemented a simple popular rank algorithm which can
be found in the source tree at
`PredictionIO/process/engines/itemrec/algorithms/hadoop/cascading/popularrank
<https://github.com/PredictionIO/PredictionIO/tree/develop/process/engines/itemrec/algorithms/hadoop/cascading/popularrank>`_.
The algorithm is built using the `Cascading <http://www.cascading.org/>`_
framework and can be built with Gradle. This algorithm assumes an input
generated by the `generic data preparator
<https://github.com/PredictionIO/PredictionIO/blob/develop/process/engines/itemrec/algorithms/hadoop/scalding/generic/src/main/scala/io/prediction/algorithms/scalding/itemrec/generic/DataPreparator.scala>`_,
and output to a format that can be consumed by the `generic model constructor
<https://github.com/PredictionIO/PredictionIO/blob/develop/process/engines/itemrec/algorithms/hadoop/scalding/generic/src/main/scala/io/prediction/algorithms/scalding/itemrec/generic/ModelConstructor.scala>`_.

Start by building the Hadoop job JAR by in the directory above. Make sure you
are using the latest code tree.

.. code-block:: console

    $ gradle clean jar

Upon successful build, you should find a ``popularrank.jar`` inside the
``build/libs`` directory.

The following describes all arguments that are recognized by the algorithm.

Input and Output:
    --input <input file>         Input file path in TSV (tab delimited) format
                                 (uid-iid-rating)
    --output <input file>        Output file path in TSV (tab delimited)
                                 format (uid-iid-score)
Engine-specific Parameters:
    --numRecommendations <Int>   Number of recommendations to generate per user
    --unseenOnly <true/false>    Whether to recommend unseen items only

Algorithm-specific Parameters:
    --doubleParam <Double>       An example Double parameter
    --intParam <Int>             An example Integer parameter
    --stringParam <String>       An example String parameter


Integrating a Custom Algorithm
------------------------------

To integrate the custom algorithm we have built, simply tell PredictionIO about
it. To do so, we need to add some information to PredictionIO's settings
database.

Usually, we will start by editing ``conf/init.json`` and adding information for
the algorithm, but for the sake of simplicity, a full example has been done and
is available `here <https://gist.github.com/predictioniogists/9084806>`_.
Download and edit this file.

The first thing to do is to replace all version numbers (0.6.8) in this file to
match your PredictionIO version number. This will make sure your settings will
still work with other algorithms.

The first difference of this file from the default one is the additional system
information about the JAR that we have produced. This piece of information is
named ``jars.pdioPopularRankAlgo`` inside the object ``systeminfos``.

.. code-block:: json

    "jars.pdioPopularRankAlgo": {
        "value": "popularrank.jar"
    }

Think of ``systeminfos`` as a central place for various system-related
information. In this case, the scheduler server will look at ``jars.*`` keys
and substitute the filename in the algorithm command accordingly. This will be
explored later.

The second difference is the addition of ``pdio-popularrank`` in the
``algoinfos`` section. This section tells PredictionIO how the algorithm is
run, and what parameters it takes so that it can automatically generate a
configuration UI in the web control panel.

Once you have correct version numbers in place, backup the current
``conf/init.json``, and replace it with the new one. Run ``bin/setup.sh`` to
populate the settings database with new settings. Afterwards, restart
PredictionIO to see the new algorithm listed in the Item Recommendation engine.
